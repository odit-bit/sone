// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: streaming/streamingpb/liveStream.proto

package streamingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LiveStreamClient is the client API for LiveStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveStreamClient interface {
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*LiveStreamInfo, error)
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	End(ctx context.Context, in *EndRequest, opts ...grpc.CallOption) (*LiveStreamInfo, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (LiveStream_ListClient, error)
}

type liveStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveStreamClient(cc grpc.ClientConnInterface) LiveStreamClient {
	return &liveStreamClient{cc}
}

func (c *liveStreamClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*LiveStreamInfo, error) {
	out := new(LiveStreamInfo)
	err := c.cc.Invoke(ctx, "/streamingpb.liveStream/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveStreamClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/streamingpb.liveStream/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveStreamClient) End(ctx context.Context, in *EndRequest, opts ...grpc.CallOption) (*LiveStreamInfo, error) {
	out := new(LiveStreamInfo)
	err := c.cc.Invoke(ctx, "/streamingpb.liveStream/End", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveStreamClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (LiveStream_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &LiveStream_ServiceDesc.Streams[0], "/streamingpb.liveStream/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &liveStreamListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LiveStream_ListClient interface {
	Recv() (*LiveStreamInfo, error)
	grpc.ClientStream
}

type liveStreamListClient struct {
	grpc.ClientStream
}

func (x *liveStreamListClient) Recv() (*LiveStreamInfo, error) {
	m := new(LiveStreamInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LiveStreamServer is the server API for LiveStream service.
// All implementations must embed UnimplementedLiveStreamServer
// for forward compatibility
type LiveStreamServer interface {
	Insert(context.Context, *InsertRequest) (*LiveStreamInfo, error)
	Start(context.Context, *StartRequest) (*StartResponse, error)
	End(context.Context, *EndRequest) (*LiveStreamInfo, error)
	List(*ListRequest, LiveStream_ListServer) error
	mustEmbedUnimplementedLiveStreamServer()
}

// UnimplementedLiveStreamServer must be embedded to have forward compatible implementations.
type UnimplementedLiveStreamServer struct {
}

func (UnimplementedLiveStreamServer) Insert(context.Context, *InsertRequest) (*LiveStreamInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedLiveStreamServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedLiveStreamServer) End(context.Context, *EndRequest) (*LiveStreamInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method End not implemented")
}
func (UnimplementedLiveStreamServer) List(*ListRequest, LiveStream_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedLiveStreamServer) mustEmbedUnimplementedLiveStreamServer() {}

// UnsafeLiveStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveStreamServer will
// result in compilation errors.
type UnsafeLiveStreamServer interface {
	mustEmbedUnimplementedLiveStreamServer()
}

func RegisterLiveStreamServer(s grpc.ServiceRegistrar, srv LiveStreamServer) {
	s.RegisterService(&LiveStream_ServiceDesc, srv)
}

func _LiveStream_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveStreamServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streamingpb.liveStream/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveStreamServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveStream_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveStreamServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streamingpb.liveStream/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveStreamServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveStream_End_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveStreamServer).End(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streamingpb.liveStream/End",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveStreamServer).End(ctx, req.(*EndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveStream_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LiveStreamServer).List(m, &liveStreamListServer{stream})
}

type LiveStream_ListServer interface {
	Send(*LiveStreamInfo) error
	grpc.ServerStream
}

type liveStreamListServer struct {
	grpc.ServerStream
}

func (x *liveStreamListServer) Send(m *LiveStreamInfo) error {
	return x.ServerStream.SendMsg(m)
}

// LiveStream_ServiceDesc is the grpc.ServiceDesc for LiveStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamingpb.liveStream",
	HandlerType: (*LiveStreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _LiveStream_Insert_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _LiveStream_Start_Handler,
		},
		{
			MethodName: "End",
			Handler:    _LiveStream_End_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _LiveStream_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "streaming/streamingpb/liveStream.proto",
}
